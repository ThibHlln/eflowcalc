import unittest
import numpy
from netCDF4 import Dataset
from datetime import datetime
import cftime

import eflowcalc


class TestStreamflowCharacteristics(unittest.TestCase):

    # load sample data
    with Dataset('../sample_data/catchment.sim.flow.nc', 'r') as ds:
        ds.set_always_mask(False)
        flows = ds.variables['flow'][[0]].T
        datetimes = cftime.num2date(ds.variables['time'][:],
                                    ds.variables['time'].units,
                                    only_use_cftime_datetimes=False)

    # construct hydrological years mask
    hydro_year = '01/10'

    hydro_years = numpy.zeros(
        ((datetimes[-1].year - datetimes[0].year), datetimes.shape[0]),
        dtype=bool
    )

    for y, yr in enumerate(range(datetimes[0].year, datetimes[-1].year, 1)):
        start = datetime.strptime('{}/{}'.format(hydro_year, yr), "%d/%m/%Y")
        end = datetime.strptime('{}/{}'.format(hydro_year, yr + 1), "%d/%m/%Y")
        hydro_years[y, :] = (datetimes >= start) & (datetimes < end)

    # set drainage area
    drainage_area = 1246.

    expected = {
        'ma1': 3.8268790245056152,
        'ma2': 3.1911301612854004,
        'ma3': 61.785490065813065,
        'ma4': 48.84190431432223,
        'ma5': 1.1992237567901611,
        'ma6': 5.060786232497665,
        'ma7': 2.8250779282132785,
        'ma8': 2.267378038939935,
        'ma9': 1.397411757833408,
        'ma10': 0.8950001042087719,
        'ma11': 0.7054822735470145,
        'ma12': 5.906805515289307,
        'ma13': 5.80048942565918,
        'ma14': 4.359946250915527,
        'ma15': 3.288614511489868,
        'ma16': 2.59397554397583,
        'ma17': 2.2831032276153564,
        'ma18': 2.1746413707733154,
        'ma19': 2.2863569259643555,
        'ma20': 2.489020824432373,
        'ma21': 3.890563726425171,
        'ma22': 5.479388236999512,
        'ma23': 5.48770809173584,
        'ma24': 25.321918487548828,
        'ma25': 22.34419059753418,
        'ma26': 24.086889266967773,
        'ma27': 18.332569122314453,
        'ma28': 16.881053924560547,
        'ma29': 21.141204833984375,
        'ma30': 24.521997451782227,
        'ma31': 25.11259651184082,
        'ma32': 30.81876564025879,
        'ma33': 56.342403411865234,
        'ma34': 31.18781089782715,
        'ma35': 25.31549072265625,
        'ma36': 3.3803889751434326,
        'ma37': 0.7088756901358565,
        'ma38': 1.4348675715485988,
        'ma39': 57.37441635131836,
        'ma40': 0.0979025587439537,
        'ma41': 0.0030712056128929057,
        'ma42': 0.6446399289336532,
        'ma43': 0.2032560431917572,
        'ma44': 0.5640782428435338,
        'ma45': 0.03252033840915327,
        'ml1': 4.093516826629639,
        'ml2': 4.129040718078613,
        'ml3': 3.234828233718872,
        'ml4': 2.555792808532715,
        'ml5': 2.0249733924865723,
        'ml6': 1.6040029525756836,
        'ml7': 1.4949601888656616,
        'ml8': 1.5150177478790283,
        'ml9': 1.3990570306777954,
        'ml10': 1.771295189857483,
        'ml11': 3.3802525997161865,
        'ml12': 3.8623785972595215,
        'ml13': 56.589351654052734,
        'ml14': 0.33837437505523366,
        'ml15': 0.2928815372288227,
        'ml16': 0.3196605294942856,
        'ml17': 0.3084743370612462,
        'ml18': 30.27013049365453,
        'ml19': 29.28815372288227,
        'ml20': 0.7823908241953293,
        'ml21': 31.51686929800438,
        'ml22': 0.0008883163003095736,
        'mh1': 9.310317993164062,
        'mh2': 8.645441055297852,
        'mh3': 7.157360076904297,
        'mh4': 4.711330413818359,
        'mh5': 3.591939926147461,
        'mh6': 3.560102701187134,
        'mh7': 3.8227922916412354,
        'mh8': 3.8490960597991943,
        'mh9': 5.242498874664307,
        'mh10': 9.35885238647461,
        'mh11': 9.436042785644531,
        'mh12': 9.281761169433594,
        'mh13': 65.39349365234375,
        'mh14': 4.10172176361084,
        'mh15': 4.161094424400638,
        'mh16': 2.214757410959037,
        'mh17': 1.4669252729075346,
        'mh18': 10.119888492963055,
        'mh19': 0.5208522525276902,
        'mh20': 0.012034588726237416,
        'mh21': 17.8557253501205,
        'mh22': 3.48167120796559,
        'mh23': 0.1100054764553512,
        'fl1': 5.583333333333333,
        'fl2': 37.76926456035706,
        'fl3': 0.0,
        'fh1': 7.833333333333333,
        'fh2': 28.718030874998014,
        'fh3': 16.916666666666668,
        'fh4': 0.08333333333333333,
        'fh5': 7.916666666666667,
        'fh6': 3.6666666666666665,
        'fh7': 0.08333333333333333,
        'fh8': 7.833333333333333,
        'fh9': 5.666666666666667,
        'fh10': 2.25,
        'dl1': 1.1068421105543773,
        'dl2': 1.125117003917694,
        'dl3': 1.163462574283282,
        'dl4': 1.3738008737564087,
        'dl5': 1.7376641233762105,
        'dl6': 31.51686929800438,
        'dl7': 32.10230032637537,
        'dl8': 32.25580027980746,
        'dl9': 32.95328490143417,
        'dl10': 28.88596883893552,
        'dl11': 0.3468495657063818,
        'dl12': 0.36459264131508645,
        'dl13': 0.43050606033664135,
        'dl14': 0.6469698690357628,
        'dl15': 0.43763109311692494,
        'dl16': 15.25,
        'dl17': 71.58571387691529,
        'dl18': 0.0,
        'dl19': 0.0,
        'dl20': 0,
        'dh1': 14.995097716649374,
        'dh2': 13.981929779052734,
        'dh3': 11.879887262980143,
        'dh4': 8.470764319101969,
        'dh5': 6.500781536102295,
        'dh6': 28.385470215961362,
        'dh7': 28.483466185331636,
        'dh8': 27.481838065423947,
        'dh9': 32.24612939877005,
        'dh10': 31.523668606984828,
        'dh11': 4.69899282033964,
        'dh12': 3.7227836730404236,
        'dh13': 2.6544715793384968,
        'dh14': 2.0617585941149,
        'dh15': 10.625,
        'dh16': 67.1690450541348,
        'dh17': 23.559139784946236,
        'dh18': 4.613636363636363,
        'dh19': 1.0,
        'dh20': 11.659574468085106,
        'dh21': 52.17460317460318,
        'ta1': 0.15187720239795977,
        'ta2': 39.929699386743586,
        'tl1': 249.0,
        'tl2': 41.846489351466246,
        'th1': 344.0,
        'th2': 60.74551411489101,
        'ra1': 0.5137761235237122,
        'ra2': 169.21633911132812,
        'ra3': 0.221866637468338,
        'ra4': 153.56686401367188,
        'ra5': 0.30184804928131415,
        'ra6': 0.06337130069732666,
        'ra7': 0.03334005922079086,
        'ra8': 75.66666666666667,
        'ra9': 8.880380240036892
    }

    def test_each_function(self):
        for sfc in self.expected.keys():
            with self.subTest(streamflow_characteristic=sfc):
                numpy.testing.assert_almost_equal(
                    getattr(eflowcalc, sfc)(
                        self.flows, self.datetimes,
                        self.hydro_years, self.drainage_area)[0],
                    self.expected[sfc]
                )


if __name__ == '__main__':
    test_loader = unittest.TestLoader()
    test_suite = unittest.TestSuite()

    test_suite.addTests(
        test_loader.loadTestsFromTestCase(TestStreamflowCharacteristics))

    runner = unittest.TextTestRunner(verbosity=2)
    runner.run(test_suite)